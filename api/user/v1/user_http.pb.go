// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v3.21.7
// source: api/user/v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserAdminConfig = "/api.user.v1.User/AdminConfig"
const OperationUserAdminConfigUpdate = "/api.user.v1.User/AdminConfigUpdate"
const OperationUserAdminLogin = "/api.user.v1.User/AdminLogin"
const OperationUserAdminRewardList = "/api.user.v1.User/AdminRewardList"
const OperationUserAdminUserList = "/api.user.v1.User/AdminUserList"
const OperationUserAdminWithdrawEth = "/api.user.v1.User/AdminWithdrawEth"
const OperationUserCardStatusHandle = "/api.user.v1.User/CardStatusHandle"
const OperationUserDeposit = "/api.user.v1.User/Deposit"
const OperationUserOpenCardHandle = "/api.user.v1.User/OpenCardHandle"
const OperationUserRewardCardTwo = "/api.user.v1.User/RewardCardTwo"
const OperationUserSetUserCount = "/api.user.v1.User/SetUserCount"
const OperationUserSetVipThree = "/api.user.v1.User/SetVipThree"
const OperationUserUpdateCanVip = "/api.user.v1.User/UpdateCanVip"

type UserHTTPServer interface {
	AdminConfig(context.Context, *AdminConfigRequest) (*AdminConfigReply, error)
	AdminConfigUpdate(context.Context, *AdminConfigUpdateRequest) (*AdminConfigUpdateReply, error)
	AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginReply, error)
	AdminRewardList(context.Context, *AdminRewardListRequest) (*AdminRewardListReply, error)
	AdminUserList(context.Context, *AdminUserListRequest) (*AdminUserListReply, error)
	AdminWithdrawEth(context.Context, *AdminWithdrawEthRequest) (*AdminWithdrawEthReply, error)
	CardStatusHandle(context.Context, *CardStatusHandleRequest) (*CardStatusHandleReply, error)
	Deposit(context.Context, *DepositRequest) (*DepositReply, error)
	// OpenCardHandle 开卡
	OpenCardHandle(context.Context, *OpenCardHandleRequest) (*OpenCardHandleReply, error)
	RewardCardTwo(context.Context, *RewardCardTwoRequest) (*RewardCardTwoReply, error)
	SetUserCount(context.Context, *SetUserCountRequest) (*SetUserCountReply, error)
	SetVipThree(context.Context, *SetVipThreeRequest) (*SetVipThreeReply, error)
	UpdateCanVip(context.Context, *UpdateCanVipRequest) (*UpdateCanVipReply, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.GET("/api/admin_dhb/open_card_handle", _User_OpenCardHandle0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/card_status_handle", _User_CardStatusHandle0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/deposit", _User_Deposit0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/withdraw_eth", _User_AdminWithdrawEth0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/reward_card_two", _User_RewardCardTwo0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/reward_list", _User_AdminRewardList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/user_list", _User_AdminUserList0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/login", _User_AdminLogin0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/set_can_vip", _User_UpdateCanVip0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/set_vip_three", _User_SetVipThree0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/set_user_count", _User_SetUserCount0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/config", _User_AdminConfig0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/config_update", _User_AdminConfigUpdate0_HTTP_Handler(srv))
}

func _User_OpenCardHandle0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OpenCardHandleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserOpenCardHandle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OpenCardHandle(ctx, req.(*OpenCardHandleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OpenCardHandleReply)
		return ctx.Result(200, reply)
	}
}

func _User_CardStatusHandle0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CardStatusHandleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserCardStatusHandle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CardStatusHandle(ctx, req.(*CardStatusHandleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CardStatusHandleReply)
		return ctx.Result(200, reply)
	}
}

func _User_Deposit0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DepositRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeposit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Deposit(ctx, req.(*DepositRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DepositReply)
		return ctx.Result(200, reply)
	}
}

func _User_AdminWithdrawEth0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminWithdrawEthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAdminWithdrawEth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminWithdrawEth(ctx, req.(*AdminWithdrawEthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminWithdrawEthReply)
		return ctx.Result(200, reply)
	}
}

func _User_RewardCardTwo0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RewardCardTwoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRewardCardTwo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RewardCardTwo(ctx, req.(*RewardCardTwoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RewardCardTwoReply)
		return ctx.Result(200, reply)
	}
}

func _User_AdminRewardList0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminRewardListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAdminRewardList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminRewardList(ctx, req.(*AdminRewardListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminRewardListReply)
		return ctx.Result(200, reply)
	}
}

func _User_AdminUserList0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminUserListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAdminUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminUserList(ctx, req.(*AdminUserListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminUserListReply)
		return ctx.Result(200, reply)
	}
}

func _User_AdminLogin0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminLoginRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAdminLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminLogin(ctx, req.(*AdminLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminLoginReply)
		return ctx.Result(200, reply)
	}
}

func _User_UpdateCanVip0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCanVipRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUpdateCanVip)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCanVip(ctx, req.(*UpdateCanVipRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCanVipReply)
		return ctx.Result(200, reply)
	}
}

func _User_SetVipThree0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetVipThreeRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSetVipThree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetVipThree(ctx, req.(*SetVipThreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetVipThreeReply)
		return ctx.Result(200, reply)
	}
}

func _User_SetUserCount0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserCountRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSetUserCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserCount(ctx, req.(*SetUserCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetUserCountReply)
		return ctx.Result(200, reply)
	}
}

func _User_AdminConfig0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminConfigRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAdminConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminConfig(ctx, req.(*AdminConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminConfigReply)
		return ctx.Result(200, reply)
	}
}

func _User_AdminConfigUpdate0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminConfigUpdateRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAdminConfigUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminConfigUpdate(ctx, req.(*AdminConfigUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminConfigUpdateReply)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	AdminConfig(ctx context.Context, req *AdminConfigRequest, opts ...http.CallOption) (rsp *AdminConfigReply, err error)
	AdminConfigUpdate(ctx context.Context, req *AdminConfigUpdateRequest, opts ...http.CallOption) (rsp *AdminConfigUpdateReply, err error)
	AdminLogin(ctx context.Context, req *AdminLoginRequest, opts ...http.CallOption) (rsp *AdminLoginReply, err error)
	AdminRewardList(ctx context.Context, req *AdminRewardListRequest, opts ...http.CallOption) (rsp *AdminRewardListReply, err error)
	AdminUserList(ctx context.Context, req *AdminUserListRequest, opts ...http.CallOption) (rsp *AdminUserListReply, err error)
	AdminWithdrawEth(ctx context.Context, req *AdminWithdrawEthRequest, opts ...http.CallOption) (rsp *AdminWithdrawEthReply, err error)
	CardStatusHandle(ctx context.Context, req *CardStatusHandleRequest, opts ...http.CallOption) (rsp *CardStatusHandleReply, err error)
	Deposit(ctx context.Context, req *DepositRequest, opts ...http.CallOption) (rsp *DepositReply, err error)
	OpenCardHandle(ctx context.Context, req *OpenCardHandleRequest, opts ...http.CallOption) (rsp *OpenCardHandleReply, err error)
	RewardCardTwo(ctx context.Context, req *RewardCardTwoRequest, opts ...http.CallOption) (rsp *RewardCardTwoReply, err error)
	SetUserCount(ctx context.Context, req *SetUserCountRequest, opts ...http.CallOption) (rsp *SetUserCountReply, err error)
	SetVipThree(ctx context.Context, req *SetVipThreeRequest, opts ...http.CallOption) (rsp *SetVipThreeReply, err error)
	UpdateCanVip(ctx context.Context, req *UpdateCanVipRequest, opts ...http.CallOption) (rsp *UpdateCanVipReply, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) AdminConfig(ctx context.Context, in *AdminConfigRequest, opts ...http.CallOption) (*AdminConfigReply, error) {
	var out AdminConfigReply
	pattern := "/api/admin_dhb/config"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserAdminConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) AdminConfigUpdate(ctx context.Context, in *AdminConfigUpdateRequest, opts ...http.CallOption) (*AdminConfigUpdateReply, error) {
	var out AdminConfigUpdateReply
	pattern := "/api/admin_dhb/config_update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAdminConfigUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...http.CallOption) (*AdminLoginReply, error) {
	var out AdminLoginReply
	pattern := "/api/admin_dhb/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAdminLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) AdminRewardList(ctx context.Context, in *AdminRewardListRequest, opts ...http.CallOption) (*AdminRewardListReply, error) {
	var out AdminRewardListReply
	pattern := "/api/admin_dhb/reward_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserAdminRewardList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) AdminUserList(ctx context.Context, in *AdminUserListRequest, opts ...http.CallOption) (*AdminUserListReply, error) {
	var out AdminUserListReply
	pattern := "/api/admin_dhb/user_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserAdminUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) AdminWithdrawEth(ctx context.Context, in *AdminWithdrawEthRequest, opts ...http.CallOption) (*AdminWithdrawEthReply, error) {
	var out AdminWithdrawEthReply
	pattern := "/api/admin_dhb/withdraw_eth"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserAdminWithdrawEth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) CardStatusHandle(ctx context.Context, in *CardStatusHandleRequest, opts ...http.CallOption) (*CardStatusHandleReply, error) {
	var out CardStatusHandleReply
	pattern := "/api/admin_dhb/card_status_handle"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserCardStatusHandle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) Deposit(ctx context.Context, in *DepositRequest, opts ...http.CallOption) (*DepositReply, error) {
	var out DepositReply
	pattern := "/api/admin_dhb/deposit"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserDeposit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) OpenCardHandle(ctx context.Context, in *OpenCardHandleRequest, opts ...http.CallOption) (*OpenCardHandleReply, error) {
	var out OpenCardHandleReply
	pattern := "/api/admin_dhb/open_card_handle"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserOpenCardHandle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) RewardCardTwo(ctx context.Context, in *RewardCardTwoRequest, opts ...http.CallOption) (*RewardCardTwoReply, error) {
	var out RewardCardTwoReply
	pattern := "/api/admin_dhb/reward_card_two"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserRewardCardTwo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SetUserCount(ctx context.Context, in *SetUserCountRequest, opts ...http.CallOption) (*SetUserCountReply, error) {
	var out SetUserCountReply
	pattern := "/api/admin_dhb/set_user_count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSetUserCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SetVipThree(ctx context.Context, in *SetVipThreeRequest, opts ...http.CallOption) (*SetVipThreeReply, error) {
	var out SetVipThreeReply
	pattern := "/api/admin_dhb/set_vip_three"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSetVipThree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UpdateCanVip(ctx context.Context, in *UpdateCanVipRequest, opts ...http.CallOption) (*UpdateCanVipReply, error) {
	var out UpdateCanVipReply
	pattern := "/api/admin_dhb/set_can_vip"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUpdateCanVip))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
